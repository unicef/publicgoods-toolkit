"use strict";(self.webpackChunkpublicgoods_toolkit=self.webpackChunkpublicgoods_toolkit||[]).push([[668],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=c(n),u=a,m=h["".concat(l,".").concat(u)]||h[u]||p[u]||r;return n?o.createElement(m,i(i({ref:t},d),{},{components:n})):o.createElement(m,i({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7019:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return h}});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),i=["components"],s={sidebar_position:6},l="Procurement",c={unversionedId:"procurement",id:"procurement",isDocsHomePage:!1,title:"Procurement",description:"KEY RECOMMENDATION: Use modular contracting to better connect",source:"@site/docs/procurement.md",sourceDirName:".",slug:"/procurement",permalink:"/publicgoods-toolkit/procurement",editUrl:"https://github.com/unicef/publicgoods-toolkit/edit/main/docs-website/docs/procurement.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Open-Source Readiness",permalink:"/publicgoods-toolkit/readiness"},next:{title:"Adoptability Assessment",permalink:"/publicgoods-toolkit/adoptability"}},d=[{value:"Modular Contracting",id:"modular-contracting",children:[],level:2},{value:"Open Source Solicitation",id:"open-source-solicitation",children:[],level:2},{value:"Intellectual Property Contract Terms",id:"intellectual-property-contract-terms",children:[],level:2},{value:"Open Source Quality Assurance",id:"open-source-quality-assurance",children:[],level:2},{value:"Data Protection and Security",id:"data-protection-and-security",children:[],level:2},{value:"Vendor Staffing",id:"vendor-staffing",children:[{value:"Maintenance and Operations",id:"maintenance-and-operations",children:[],level:3}],level:2}],p={toc:d};function h(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"procurement"},"Procurement"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"KEY RECOMMENDATION"),": Use modular contracting to better connect\nthe right vendor to the right task, break vendor lock-in, and reduce\nrisks associated with any one vendor. Modular contracting works best with an agile\ndevelopment model, a modular technical design, and Open Source Quality Assurance\n(OSQA) practices."),(0,r.kt)("p",null,"EXAMPLE: California's modular contracting approach in overhauling some\nlegacy systems in their Child Welfare system enabled them to work with\nmultiple vendors to ",(0,r.kt)("a",{parentName:"p",href:"https://18f.gsa.gov/2016/11/15/modular-procurement-state-local-government/"},"dramatically reduce their delivery timeline from\nyears to\nmonths"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"KEY RECOMMENDATION"),": Take explicit steps to attract bids from\nvendors who are experienced at open-source development rather than\nvendors who are only experienced at government contracting. Conduct\nFOSS-specific outreach early in the RFP lifecycle and ensure\nsolicitations are promoted in media specifically aimed at open-source\ndevelopers, not just at government software vendors."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"KEY RECOMMENDATION"),": Ensure you have the ability to\ndeploy, (re)distribute, and modify the software under a suitable open-source, ",(0,r.kt)("a",{parentName:"p",href:"https://digitalpublicgoods.net/standard/"},"DPG\nstandard")," license.  Contracts should\nprevent any vendor from encumbering further development and\ndistribution on either trademark or patent grounds and expressly\nforbid satisfying any deliverable with software that includes any\n'forever proprietary' component. Lastly, you should require acceptance\nof code into the open-source repository as part of the definition of\ncontractual delivery in software milestones."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"KEY RECOMMENDATION"),": Integrate OSQA practices into procurement, vendor\nmanagement, and your own\nplanning to ensure you gain the full benefits of open source. "),(0,r.kt)("p",null,"This module describes a few procurement tips, such as modular\ncontracting and open source quality assurance practices, like OSQA practices,\nthat can help\nyou better attract and manage vendors to create a successful\nopen-source DPG."),(0,r.kt)("p",null,"This module complements the Digital Impact Alliance's (DIAL)\n",(0,r.kt)("a",{parentName:"p",href:"https://procurement-digitalimpactalliance.org/"},"Procurement of Digital\nTechnology"),"\nguide. That high level, comprehensive guide is aimed at helping\ngovernment agencies manage general digital spend, from strategic\nplanning through lifecycle management. This module dives more deeply\ninto specifics around procurement related to open-source software,\nparticularly working with vendors."),(0,r.kt)("p",null,"Free and Open Source Software (FOSS) has rapidly become successful in\nthe commercial sector.  Few modern enterprises can thrive without\ntaking full advantage of open-source antecedents to power a\ncompetitive business.  More and more sectors find themselves taken\nover by open-source offerings that crowd out once-dominant proprietary\ncompetitors.  It is fair to say that open source, once maligned by\nmuch of the commercial software world, has emerged victorious and is\nnow a major component of every software effort of note today."),(0,r.kt)("p",null,"Relatedly, an agile, iterative, and continuous style of development\nhas taken hold at the most successful technology companies.  Gmail,\nFacebook, and other online services are constantly\nbeing rewritten and redeployed, on a component by component basis, at\na frequency measured in days and sometimes even in hours.  Companies\nhave learned how to structure their software development efforts so\nthat user-facing systems can be rebuilt continuously, partially,\nreliably, and efficiently.  A change in one place doesn't make\neverything else break, because a modular architectur with clear module boundaries\nhas been\ndefined.  These boundaries often reflect organizational divisions as\nmuch as technical ones."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"FURTHER READING"),": For a good introduction to modular architecture,\nsee this ",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/on-software-architecture/on-modular-architectures-53ec61f88ff4"},"blog\npost"),",\nwhich is the first in a two-part series. Another useful resource is\nthis ",(0,r.kt)("a",{parentName:"p",href:"https://blog.fedecarg.com/2008/06/28/a-modular-approach-to-web-development"},"blog\npost"),",\nwhich focuses on web development. See also the section on\nExtensibility in the\n",(0,r.kt)("a",{parentName:"p",href:"/publicgoods-toolkit/adoptability#adoptability-assessment"},"Adoptability")," module."),(0,r.kt)("p",null,"This style of development is closely connected to open source: the\navailability of swappable open-source components makes modular\ndevelopment not only possible but practically inevitable, and it\nrewards companies for participating in the open-source projects they\ndepend on the most.  ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/unicef/publicgoods-toolkit/blob/main/interviews/george-gelaga-king.md"},"Sierra Leone built an open, composable\ninfrastructure platform")," that any government ministry needing a data\nwarehouse/analytics/visualization solution can plug into.  Initial\nfunding was to build this for a Geographical Informations Systems\n(GIS) application, but their modular approach means the investment is\nuseful in other domains, thus amplifying the effect of the work and\nhelping other ministries move more quickly on their own data-intensive\nprojects."),(0,r.kt)("p",null,"Time will tell, but the open-source, open-standards based modular\napproach might also make DPGs particularly attractive to funders, as\none investment can reap a significantly compounded return as that\nmodule gets adapted and re-used. Open APIs and a modular architecture\ncan also help bring in funding for specific use cases, as was the case\nfor the DPG DHIS2 and philanthropic funding for ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.digitalsquare.io/index.php/Digital_Square_Investments_in_Global_Goods#Notice_B_Investments"},"integrating DHIS2 with\nMicrosoft\nBI"),"\n-- an activity led not by core DHIS2 members but by a non-profit\norganization and their commercial partner."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"FURTHER READING"),": The ",(0,r.kt)("a",{parentName:"p",href:"https://www.gao.gov/assets/600/593091.pdf"},"US Government Accountability Office\npublished a guide to agile, modular development"),"\nin 2012\nthat is a useful resource for government agencies."),(0,r.kt)("p",null,"Generally speaking, though, government has lagged behind.  While\ngovernments have begun to embrace open-source approaches and agile develoment,\nactual open-source successes are much more rare in government than in the private\nsector.  There are a lot of ",(0,r.kt)("a",{parentName:"p",href:"https://producingoss.com/en/producingoss.html#governments-and-open-source"},"reasons why this is the\ncase"),",\nbut none of them is that open source is somehow unsuited for\ngovernment use.  Rather, government has not yet spent a decade honing\nopen-source practices that take into account the particular needs of\ngovernment software development."),(0,r.kt)("p",null,"One place this disparity appears is in contracting and procurement.  While\ngovernment has\nmuch to gain from open source and is in the process of developing and\nspreading best practices on how to do that, it cannot simply borrow\nprocurement models wholesale from the private sector.  Government has an\nobligation to safeguard the public trust.  Its operations are accountable\nto public political process.  Public investments are judged by\ndifferent metrics than those used in private-sector commerce.  "),(0,r.kt)("p",null,"That is not to say that government lacks the knowledge or ability to\nsucceed at FOSS projects.  It does suggest, though, that\napproaches should be designed with care for the particular constraints\nand opportunities found in public agencies. Some government agencies have forged\nadvances from which others can learn."),(0,r.kt)("h2",{id:"modular-contracting"},"Modular Contracting"),(0,r.kt)("p",null,'One center of excellence in government development of FOSS software is\n18F, the digital service delivery arm of the United States General\nServices Administration.  They focus on technology procurement for\nfederal agencies, and their methodology typically begins with agile\nand open-source approaches.  18F is generally considered a model\nagency when it comes to open source.  They advise federal projects to\nconsider procurement based on a model of "',(0,r.kt)("a",{parentName:"p",href:"https://18f.gsa.gov/tags/modular-contracting/"},"modular\ncontracting"),'" in which\nlarge projects are procured via a set of small contracts, each to the\nvendor most suited for a particular task.  This is a good starting\npoint for state and local technology procurement as well (18F also\naddresses ',(0,r.kt)("a",{parentName:"p",href:"https://18f.gsa.gov/2016/11/15/modular-procurement-state-local-government%3E"},"non-federal modular\ncontracting"),")."),(0,r.kt)("p",null,"This ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/18F/Modular-Contracting-And-Agile-Development/blob/master/_strategies/modular-procurement.md"},"modular approach to contracts has several\nbenefits"),",\nbeginning most importantly with breaking vendor lock-in.  At any\npoint, a well-procured effort should provide recourse to multiple,\ncredible vendors, each of whom has familiarity with the software,\nexperience working with the other teams, and is able to work well with\nthe agency's open-source approach.  Every vendor becomes replaceable\nbecause none by itself is so crucial to the process that it cannot be\nreplaced."),(0,r.kt)("p",null,'With that goal in mind, 18F and others in the industry recommend\nstructuring procurement as multiple contracts distributed among a\ngroup of vendors.  They also recommend relatively small contracts,\nthough "small" often refers to a different scale, depending on the\nlocale and the level of government.'),(0,r.kt)("p",null,"It is difficult to make one-size-fits-all recommendations as to the\ncorrect size of a modular contract.  That will depend on the overall\nbudget, the project, and the ecosystem needs at a particular stage of\ndevelopment.  For a medium-sized informational website project, one\nmight employ contracts no smaller than $60,000.  This size allows\nmultiple vendors while still providing enough budget room for vendors\nto deliver without squeezing margins so much that quality suffers.\nGenerally, on the upper end, we do not recommend a monetary limit---\nsome modules will, after all, make the most sense as larger\ncomponents.  The key is to choose module sizes that align with both\nthe component and the overall multiple-vendor ecosystem your agency is\nbuilding."),(0,r.kt)("p",null,"One reason to structure procurement this way is to reduce risk\nassociated with any one vendor.  There is a lot one might say about\nthe nature of risk in government technology procurement.  For the\npurposes of this report, though, spreading risk among a series of\nvendors reduces the chances of catastrophic failure and increases the\nability to recover from problems, while still allowing an agency to\nconcentrate overall responsibility for delivery in the hands of one\nintegration vendor.  This reduction in risk is usually worth the\nattendant increases in cost and contracting overhead that are\ninevitable when one is working with more vendors."),(0,r.kt)("p",null,"One of the ways this strategy improves the risk outlook is by opening\noptions for contracting with vendors with specific\nexpertise.  No one development firm is good at every possible\ntechnology stack.  Native Android and iOS expertise differ from each\nother and from web development.  Many development vendors are good at\none of these; few can deliver all three at the highest levels.\nSimilarly, front end differs from back end development, and they both\ndepart from user experience design.  Small contracts --- typically\nunder $100,000, in most contexts --- provide the opportunity to\nchoose the best vendor for a given task, not one vendor who averages\nout to be the best across the board.  This allows the hiring of\nsubject-matter experts and can provide access to the best experience\nindustry can offer.  In any event, it might also be useful to keep in\nmind any thresholds on contract size that enable streamlined\nprocurement process for smaller contracts.  Using those as a guide to\nkeep contracts small has the added benefit of speeding up and\nsimplifying procurement."),(0,r.kt)("p",null,"Issuing small contracts might also help agencies meet mandated targets\nfor contracting with small businesses.  Our experience after\ninterviewing many government procurement officials is that a major\nbarrier to small business contracting is a perception of risk in\nasking a small or new business to tackle a large, important project\n--- established vendors often end up with the big contracts partly\n",(0,r.kt)("em",{parentName:"p"},"because")," they are established.  Smaller contracts are inherently less\nrisky, and multiple vendors ",(0,r.kt)("em",{parentName:"p"},"working in an open mode")," makes it likely\nthat issues will be surfaced before they become catastrophic, when\nremediation might still be easy and relatively inexpensive."),(0,r.kt)("p",null,"Small, modular contracts align well with a technologically\nmodular design.  Modular contracting enforces modular technical design\nas different teams need to separate concerns so they can all develop\nin parallel.  Similarly, a technically modular product can be developed by a\nvariety of smaller vendors in ways that a\nmonolithic structure would prevent.  While one ",(0,r.kt)("em",{parentName:"p"},"could")," hire one vendor\nto build an entire system, teams that work together under one roof are\nmore likely to --- indeed, almost inevitably will --- violate modular\nboundaries under deadline pressure.  Separating those teams helps\nenforce the technical boundaries that keep an open-source process\nfunctioning. Another approach to enforcing modular separation is\nthrough OSQA, described below."),(0,r.kt)("p",null,"Should there be a significant set of particular local needs for your\nDPG, a modular architecture and modular contracting provides\nflexibility to accomodate customizations and better support local\nbusiness and talent development.  As an example, ",(0,r.kt)("a",{parentName:"p",href:"https://www.unicef.org/evaluation/media/946/file/Primero.pdf"},"UNICEF contracted\nwith a commercial software develoment\nvendor"),"\nto create the open-source DPG ",(0,r.kt)("a",{parentName:"p",href:"https://www.primero.org/"},"Primero")," platform.\nDeploying agencies can find their own vendors to design and build\nPrimero forms and workflows, but if the project is complicated or the\ndeploying agency is unable to source additional development and funds\nlocally, UNICEF entered long-term agreements with four IT service\nproviders to help."),(0,r.kt)("p",null,"Finally, we note that modular contracting aligns perfectly with the\n",(0,r.kt)("a",{parentName:"p",href:"https://standard.open-contracting.org/latest/en/"},"Open Contracting Data Standard\nDPG"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"KEY RECOMMENDATION"),": Modular contracting can help to better connect\nthe right vendor to the right task, break vendor lock-in, and reduce\nrisks associated with any one vendor. Modular contracting works best with an agile\ndevelopment model and a modular technical design."),(0,r.kt)("p",null,"One aspect of modular contracting that is sometimes overlooked is that\nit can be costly to conduct many smaller rounds of procurement.  Even\nif those smaller rounds qualify for faster processes with less\noverhead, the logistics around each agreement are themselves a factor\nthat introduce both delay and risk to a project.  It is quite common\nfor all parties to agree on a set of work to be done and yet never\nproceed all the way through the contracting stage for various reasons."),(0,r.kt)("p",null,"Vendors too see a rise in costs.  Because municipal scopes and budgets\nare often smaller than for federal projects, vendors at this level of\ngovernment often find the small sizes of modular contracts a\nchallenge.  Smaller contracts for shorter periods of work provide less\nstability.  Vendors find themselves unable to make the long-term\ncommitments needed to hire long-term employees instead of ad-hoc\ncontractors tend not to stay as long.  That raises their costs, which\nof course eventually raises costs for your agency.  Modular contracts\ncan cause additional staffing complexity for vendors as well (see\nbelow, ",(0,r.kt)("a",{parentName:"p",href:"#vendor-staffing"},"Vendor Staffing"),")."),(0,r.kt)("p",null,'For these reasons, we suggest that agencies engaged in modular\ncontracting place those contract modules in larger Master Services\nAgreements ("MSAs") while also encouraging vendors to seek\nmultiple contract modules under their MSA.  In addition, one can\nincrease the size of modules as a project proceeds.  Once a project\nhas a set of vendors who understand the product, demonstrate\nopen-source expertise, and have established a track record of delivering\nquality work on time, the benefits of modular contracting can decrease\nwhile the costs remain elevated.  At that point, one might opt for\nlarger contract modules, especially as the project grows in scope.\nOne might also allocate these larger modules among its existing set of\nvendors as a way to balance risk management with cost management.'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"RECOMMENDATION"),": Agencies using modular contracting should\nconsider placing these smaller contracts within larger Master Service\nAgreements for more efficiency and flexibility."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"FURTHER READING"),": The Obama administration in the United States\nproduced a useful and very ",(0,r.kt)("a",{parentName:"p",href:"https://obamawhitehouse.archives.gov/sites/default/files/omb/procurement/guidance/modular-approaches-for-information-technology.pdf"},"comprehensive guide to modular\ncontracting"),"."),(0,r.kt)("h2",{id:"open-source-solicitation"},"Open Source Solicitation"),(0,r.kt)("p",null,'Modular contracting can often be done in small enough contracts that\nstreamlined procurement processes are available.  At some point,\nthough, an agency may want to embark on a larger project that does not\neasily fit into a "small contracting" budgeting provision.  In that\ncase, it will need to operate a formal RFP process.  This section\ncontains information on open-source concerns that should be considered\nduring that process but many points are also relevant in non-RFP\nrequiring situations.'),(0,r.kt)("p",null,"First, it's essential to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/unicef/publicgoods-toolkit/blob/main/interviews/george-gelaga-king.md"},"include the requirement for open-source\ndevelopment and final product in the RFP stage"),". "),(0,r.kt)("p",null,"A common pitfall in procurement is beginning an RFI and RFP process\nwith high hopes for attracting vendors eager to provide agile,\nopen-source development in a public spirit of building multi-jurisdictional\nsoftware but ending up unable to deliver on those hopes.\nUnfortunately, RFP responses often include a long list of traditional\nvendors who are not eager to work in this manner and perhaps lack the\nexperience needed to do so well.  The hoped-for vendors are nowhere to\nbe found.  Eventually, as RFP deadlines loom, agencies look around for\nadditional submissions and maybe even try to promote the RFP in new\nforums.  When FOSS-experienced vendors notice the RFP, they have a\nshort week to submit a hastily compiled bid that shows both their\ninexperience and the rushed timeframe."),(0,r.kt)("p",null,"This failure pattern appears at all levels of government and in many\ndifferent types of agencies.  The truth is that even as governments\nare still gaining sophistication with open source, the commercial FOSS\nworld is also still gaining maturity in navigating government\nprocurement systems.  Many open-source development companies,\nespecially smaller and less traditional ones, do not have procedures\nthat let them discover open-source opportunities at early stages.  If\ngovernment is to succeed at open source, it needs to expand the pool\nof RFP respondents. This might mean dropping the requirement for a vendor to\nhave experience and references around past government projects."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"KEY RECOMMENDATION"),": Take explicit steps to attract bids from\nvendors who are experienced at open-source development rather than\nvendors who are only experienced at government contracting."),(0,r.kt)("p",null,"There are several strategies procurement agencies use in this regard:"),(0,r.kt)("p",null,"First, it pays to ensure that solicitations are promoted in media\naimed at open-source developers, not just at government software\nvendors.  An agency might maintain a list of community connectors who\ncan promote a solicitation to a wider open-source audience (academic relationships\ncan help here).  It is\nimportant to conduct this outreach early in the process because newer\nvendors will need more time than government-experienced vendors to\nprepare responses. (Although it goes without saying, it is worth\nemphasizing here that this type of targeted outreach must comply with\nethics and procurement rules.)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"KEY RECOMMENDATION"),": Conduct FOSS-specific outreach early in the\nRFP lifecycle and ensure solicitations are promoted in media\nspecifically aimed at open-source developers, not just at government\nsoftware vendors (in alignment with your agency's ethics and\nprocurement rules)."),(0,r.kt)("p",null,"Second, it is important to be clear in describing project requirements\nand emphasizing the need for open-source deliverables, process, and\nexperience (see ",(0,r.kt)("a",{parentName:"p",href:"#open-source-quality-assurance"},"Open Source Quality Assurance"),"\nbelow for more on this; text in the ",(0,r.kt)("a",{parentName:"p",href:"/publicgoods-toolkit/appendix-sample-contract#appendix-sample-contract-language"},"Appendix: Sample Contract Language"),' can be copied as merited\nfor the RFP as well).  The phrase "open source" applies in contexts\nother than software (e.g., open source intelligence), so be sure to\nspell out the full phrase "open source software" or "open-source software" for vendors searching\nthe web or databases for opportunities.  The types of vendors an\nagency hopes to attract will be sophisticated about the differences\nbetween open-source software, open data, and agile development.  Be\nspecific and strategic in using these terms and back them up with\nquestions designed to elicit experience in these domains.'),(0,r.kt)("p",null,"Third, if using modular contracting, make sure vendors understand the\nbreadth of solicitations so they can understand both their specific\nbid and the overall process."),(0,r.kt)("p",null,"Fourth, open-source vendors expect agile, iterative development.  However, a\ntraditional RFP process often asks vendors to envision the entire\nengagement and price it as a whole, which requires a degree of\npre-planning that open-source modular contracting is specifically\ndesigned to avoid.  Craft a process that is clear about goals and\nrequirements but leaves room for vendors to meet them in flexible ways\nthat might change over the course of the project.   This\nrequires being clear about which requirements are truly fixed and\nwhich ones were added because they seem likely to be needed on the\npath toward a complete solution."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"RECOMMENDATION"),": Although contract amendments are possible\n(especially if they are just budget reallocation), you should seek\ncontract terms that allow flexibility and iteration wholly within the\nterms of the agreement. Include a process (and budget)\nfor iterations and lightweight changes that do not require giving up\nother features and milestones."),(0,r.kt)("p",null,"The upside for an agency is that this flexibility runs in both\ndirections.  Procuring agencies should be able to request incremental\nimprovements that were not specified in detail at project inception\nwithout incurring the costs of change orders.  Similarly, agencies\nshould avoid vendors that demand high-overhead change orders for minor\nadjustments.  Neither vendors nor agencies can be expected to predict\nevery last detail of development in advance.  A process that requires\nsuch prediction is a broken process."),(0,r.kt)("p",null,"In talking to open-source software development vendors, it is clear\nthat there are many capable firms that would provide excellent service\nto government agencies.  Too many of these firms avoid responding to\nRFPs because they cannot navigate the process.  Agencies can procure\nfrom experienced open-source vendors by attracting more of these vendors\ninto the government services space and fostering competition in FOSS\nservice delivery."),(0,r.kt)("h2",{id:"intellectual-property-contract-terms"},"Intellectual Property Contract Terms"),(0,r.kt)("p",null,"Beyond modular contracting, there are a series of best practices that\ncan help maximize the benefits of a supportive vendor ecosystem.  Adopting those\nbest practices often starts with a consideration of contract terms."),(0,r.kt)("p",null,"Many government software vendors have traditionally retained\nintellectual property rights to the software they create even though\nthat software was created at public expense.  There are a variety of\nreasons why such arrangements were common in the past, but many of the\nconditions that made it necessary no longer hold.  For example,\ngovernment software is no longer likely to be delivered as a\nmonolithic stack in which the government-procured layer is but one\nsmall party tightly coupled to a variety of proprietary parts owned by\nthird parties.  Modularity, FOSS libraries, and standardized,\nopen technology stacks make that architecture a thing of the past."),(0,r.kt)("p",null,"Perhaps more importantly, government procurement agents today have more\noptions in the marketplace.  There is a growing number of experienced\nvendors capable of delivering world-class software who don't require\nexclusive legal rights to exploit the codebase at the end of the\ncontract.  Open source is competitive and is driving wholly proprietary\napproaches out of the market."),(0,r.kt)("p",null,"There are three classes of software delivered in a typical procurement\nscenario: third-party open-source software, pre-existing\nvendor-created software, and code custom-written by the vendor for the\ncurrent project.  Notice this list does not include any third-party\nproprietary software."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"KEY RECOMMENDATION"),": Contracts should expressly forbid satisfying\nany deliverable with software that includes any proprietary component."),(0,r.kt)("p",null,"These different types of software are to some degree distinguishable\nfor procurement purposes, but might be intermingled in the source\ncode.  We distinguish them at contracting just to ensure government\nagencies have the rights they need to proceed with their open-source\nplans and never need to secure a vendor's permission to operate,\nimprove, or hire other parties to work on the software.  This is the\nkey point."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"KEY RECOMMENDATION"),": No matter what happens with intellectual\nproperty rights at the contracting stage, you must have the ability to\ndeploy, (re)distribute, and modify the software under a suitable open-source\nlicense (see the ",(0,r.kt)("a",{parentName:"p",href:"https://digitalpublicgoods.net/standard/"},"DPG standard"),"\nrequirements around licensing)."),(0,r.kt)("p",null,"For third-party open-source software, this means that an agency must\nreceive that software, clearly labeled, in a manner compliant with\ntheir original open-source license and under terms that are compatible\nwith the intended license of the final product.  For code written by\nthe vendor for other engagements and not paid for by the contracting\nagency, this means delivered to the agency under an open-source license\nthat allows redistribution under the intended license of the final\nproduct.  There is no need for an agency to gain exclusive rights to\nthese classes of software, and indeed, more distribtution is\noften better."),(0,r.kt)("p",null,"For code written by a vendor and paid for by an agency, the question\nof who should end up owning the rights is up for debate.  Some\nagencies might be willing to see those rights remain in the vendor's\nhands as long as they receive an open-source license that allows\nfurther distribution under the intended open-source terms of the final\nproduct.  So long as an agency secures those rights, it does not much\nmatter who holds the copyright.  Common practice, though, appears to\nbe that the contracting agency ultimately gains all rights.  In some\ncases, the vendor might receive a license back allowing proprietary\nrelicensing so they can resell that software to other clients or in\nother markets.  A vendor might even enjoy a period of exclusivity in\nits ability to make proprietary use of the software.  Specific\narrangements will vary, but there is no harm in them so long as a) the\nterms serve a larger goal of fostering a multi-vendor ecosystem, and,\nas noted above, b) the agency always has full rights, including\nredistribution rights, under the desired outbound open-source license."),(0,r.kt)("p",null,"As an example, the County of Los Angeles in California engaged a\nvendor, Smartmatic, to build a new open-source voting machines that\ndebuted during the primary elections in March of 2020.  LA owns the\nresulting software and hardware designs, and Smartmatic enjoys a\nperiod of exclusive ability to use proprietary licensing to exploit\nthe designs in the market.  At the same time, LA is moving toward\ngranting the public open-source access to these materials.  Smartmatic\nwill have the proprietary rights it wants -- for a limited time -- as it tries to sell the\nsystem in other jurisdictions.  While it will eventually have to\ncompete with the open-source crowd, it is welcome to build a\nproprietary business if it can do so under such conditions.  Officials\nin LA hope this will help create the demand that entices more\nparticipants to join the effort.  Other public-spirited projects in\nwhich a primary vendor predominates have either considered or adopted\nsimilar arrangements."),(0,r.kt)("p",null,"It is worth making one final point about rights.  As we touched upon\nearlier in the ",(0,r.kt)("a",{parentName:"p",href:"/publicgoods-toolkit/#introduction"},"Introduction")," and ",(0,r.kt)("a",{parentName:"p",href:"/publicgoods-toolkit/policy#policy"},"Policy")," modules,\nopen-source licenses commonly deal with copyrights.  They do not\nadequately address trademarks and are uneven in their handling of\npatents.  Contracts must secure terms that prevent a vendor from\nencumbering further development and distribution on either trademark\nor patent grounds.  It's not enough to get a blessing for governmental\nor \"public\" use.  What's needed is a promise to not make patent\ninfringement claims on ",(0,r.kt)("em",{parentName:"p"},"anyone")," for their use of the patent as\nembodied in the DPG."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"KEY RECOMMENDATION"),": Contracts terms must prevent a vendor from\nencumbering further development and distribution on either trademark\nor patent grounds."),(0,r.kt)("h2",{id:"open-source-quality-assurance"},"Open Source Quality Assurance"),(0,r.kt)("p",null,"In addition to intellectual property clauses, we recommend using\nprocurement structures to emphasize the requirement of an open-source development ",(0,r.kt)("em",{parentName:"p"},"process"),".\nA vendor who merely delivers a timely set of open-source components\nhas not actually done enough to succeed at contributing to a\nsuccessful open-source project.  In addition to writing quality open-source\ncode, the vendor must enable all the other teams to succeed by\nparticipating in and reinforcing the open-source process."),(0,r.kt)("p",null,"Some vendors will be unable to manage this participation.  They won't\nhave the open-source experience or, in some cases, the temperament.\nNo matter how much an agency might prefer experienced open-source\nvendors during the procurement process, it is likely that at least\nsome vendors will end up on the team because they submitted bids that\nscored high on non-open-source criteria.  To succeed, an agency cannot\nassume all its vendors will have the open-source skills they need.\nThe agency can instead provide structures that ensure success even\nwhen relying on vendors who might otherwise fall short in their open-source\npractice."),(0,r.kt)("p",null,"Similarly, some vendors will be ",(0,r.kt)("em",{parentName:"p"},"unwilling")," to participate in\ngood faith.  That is, they will be willing to check boxes on the\npaperwork, but behaviorally will default to the type of closed\ndevelopment process typically found in government contracts.\nSometimes this unwillingness comes from a lack of experience and\nopen-source skill.  In some other cases, perhaps, a vendor may hope the\nopen-source process fails, which could result in a final product that,\nwhile technically open-source, cannot actually be released as open-source,\nor that resists open-source dynamics, thus leaving the vendor\nas the sole practical source for that component in the government\nprocurement marketplace."),(0,r.kt)("p",null,'Whatever the reason for failure to participate in an open-source\nprocess, agencies must have ways to bring recalcitrant vendors into\nprocess compliance.  Otherwise, the project risks failure across\nmultiple teams.  To prepare for such situations, we recommend\ninstituting Open Source Quality Assurance ("OSQA") at the project\nmanagement level.  See the\n',(0,r.kt)("a",{parentName:"p",href:"/publicgoods-toolkit/appendix-sample-contract#open-source-quality-assurance"},"Appendix: Sample Contract Language"),"\nfor a\nsample OSQA statement of work that can help you bring this practice into\nyour project. "),(0,r.kt)("p",null,"OSQA is a set of practices designed to ensure that an open-source\nproject ",(0,r.kt)("em",{parentName:"p"},"behaves")," like an open-source project.  If vendors are\ndelivering open-source code but not engaging in the process, the\nsoftware will hit some of its milestones but fail as collaboration\nfalters over time.  Adding new vendors will be difficult.  Teams will\ndiscover API mismatches when they try to integrate modular pieces.\nPatches will go unreviewed, or worse, be accepted anyway.\nDocumentation will degrade to the point that modules can only be\ndeployed by the teams that developed them, which reintroduces vendor\ndependency and lock-in.  By the time these failures are obvious to the\nprocuring agency, the final product will struggle as it experiences\nall the complexity of modular contracting without the benefits."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"KEY RECOMMENDATION"),": Integrate OSQA practices into procurement, vendor\nmanagement, and your own\nplanning to ensure vendors follow through on the open-source\ndevelopment ",(0,r.kt)("em",{parentName:"p"},"process")," as well as the product -- and that you gain the full\nbenefits of open source. Bringing up OSQA\nrequirements early in vendor engagement signals your seriousness about\nopen-source success and puts vendors on notice, which is particularly\nhelpful when relying on vendors that don't have much open-source\nexperience. For a fuller description of what OSQA entails, please see\na sample statement of work that includes OSQA in the\n",(0,r.kt)("a",{parentName:"p",href:"/publicgoods-toolkit/appendix-sample-contract#open-source-quality-assurance"},"Appendix: Sample Contract Language"),"."),(0,r.kt)("p",null,"There are a variety of OSQA techniques one can introduce.  OSQA can\nact as a gateway that enforces standards at the pull request stage.\nThis means OSQA approval is needed before source code changes can be\nincorporated into the project.  Because incorporating changes to\nsource code is a required deliverable for all software development\nvendors, this method prevents vendors from\nfulfilling contractual milestones unless they meet quality standards.\nVendors soon realize they cannot invoice if they do not deliver\napproved code, which provides OSQA an entry point into a collaborative\ndiscussion about best practices that deliver high-quality code that\npasses approval standards quickly."),(0,r.kt)("p",null,"OSQA enforces policies about testing, adherence to design\nguidelines, accessibility compliance, and communications (e.g. as\nusing the public bug tracker rather than private emails), and it\nreviews documentation.  OSQA periodically attempts to build and\ndeploy the product by assigning a test deployment to an operations staffer who has\nno prior knowledge of the software.   If that person,\narmed with nothing more than the documentation, cannot deploy, that\nsurfaces issues that must be addressed."),(0,r.kt)("p",null,"Ideally, an agency should take part in the OSQA process itself by\nparticipating directly in development to at least some degree.  This\ndoes not mean that the agency needs to be the primary driver of\ndevelopment for any particular component, or even a major contributor,\nnor does it mean that the agency should necessarily be the main\nsupervisory provider of OSQA.  It is just that even a small level of\ndirect participation in collaborative technical work will provide a\nlevel of credibility and connection with all the vendors working in\nthe project that cannot be achieved any other way.  That credibility\nwill pay dividends in every meeting, progress checkin, and contract\nnegotiation by alerting external contributors (and especially\nvendors) that the procuring agency understands every aspect of the\nwork.  It will also help ensure that open-source processes are\nfollowed in spirit as well as in letter, since lapses will be more\nreadily apparent, and it will help the agency to learn. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"RECOMMENDATION"),": You should participate directly in technical\ndevelopment, even if only to a small degree, in order to create\ncredibility and connection with vendors and contractors and to\ncontribute to maintaining a consistent open-source culture. There are\nhigh, reusable dividends to this investment."),(0,r.kt)("p",null,"Furthermore, by requiring OSQA to sign off on code submissions, an\nagency can enforce standards in the one way that vendors cannot\nignore: it stands between vendors and reaching their contracted\ndeliverables.  That is, it allows an agency to enforce open-source\nprocess compliance as a condition of being paid on time."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"RECOMMENDATION"),": You should require acceptance of code into the\nopen-source repository as part of the definition of contractual\ndelivery in software milestones."),(0,r.kt)("p",null,"At every stage, the software should be ready for open-source\nengagement. OSQA is an agency's assurance that this is true."),(0,r.kt)("p",null,"Sitting on the tree is only one aspect of an OSQA program.  There are\na number of other strategies, and choosing the right mix for a given\nproject should occur at an early stage of project specification.\nFully describing all these techniques is beyond the scope of this\nmodule, but the point here is not that an agency should master all\nthese techniques, just that it should identify and implement at least\nsome approaches."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"RECOMMENDATION"),": An agency should add OSQA elements to its\nrequirements list when considering project roles.  If it does not plan\nto manage OSQA in-house, it should consider contracting for it."),(0,r.kt)("p",null,"OSQA has a track record of success in government agencies.  We have\nperformed OSQA and seen it work well at several levels of government,\nfrom federal to local.  In one instance, OSQA was begun long after the\nprimary development vendor had begun work, and it was too late to\nestablish open-source practices from day one.  Instead, the OSQA team\nworked with the vendor and the procuring agency to identify process\nfailures and teach open-source best practices.  Over time, vendor\nparticipants as well as agency staff began to reap the benefits of\ninvesting in the process.  After some time, teams embraced the process\nbecause it paid visible dividends (eventually including independent\ndeployment by another jurisdiction).  The OSQA team was able to back away,\nleaving the project to manage the process on its own.  In later\nreviews of the work, we understand that they still rely on these\nprocesses as the project continues to develop."),(0,r.kt)("p",null,"For most projects, we recommend adding OSQA capability earlier in the\nprocess and combining that role with other project management duties. In some\ninstances, this could fit well with a community manager role. This is what the\nBill and Melinda Gates Foundation ",(0,r.kt)("a",{parentName:"p",href:"https://appdevelopermagazine.com/the-gates-foundation-chats-about-mojaloop"},"funded for the DPG Mojaloop to ensure that code\ncontribution runs smoothly and prioritizes\ndevelopment of open-loop, pro-poor digital financial systems"),".\nPutting an OSQA role at the coordination center of a project helps to\nenforce standards, shape the process, and lead by example.\nIt also puts it in a good position to play a role as advocate for an\nagency in evaluating contractor decisions and proposals.  Ultimately,\nlearning by example is how well-functioning open-source projects set\nnorms, and as project development finds its rhythm, one can also\nexpect less-experienced open-source vendors to learn from the others."),(0,r.kt)("h2",{id:"data-protection-and-security"},"Data Protection and Security"),(0,r.kt)("p",null,"Please see the ",(0,r.kt)("a",{parentName:"p",href:"/publicgoods-toolkit/policy#policy"},"Policy")," module for key points around security\nand data protection in vendor contracts, as well as the ",(0,r.kt)("a",{parentName:"p",href:"/publicgoods-toolkit/appendix-sample-contract#appendix-sample-contract-language"},"Appendix: Sample Contract Language"),"\nfor some relevant, example contractural language."),(0,r.kt)("h2",{id:"vendor-staffing"},"Vendor Staffing"),(0,r.kt)("p",null,"Staffing a software development effort while engaged in modular\ncontracting can be a challenge.  Smaller contracts will tend to lead\nto smaller vendors as large vendors chase larger opportunities.\nDifferent contract modules will have different timeframes, and some\nvendors might even have discontinuous engagements that end well before\nthe next one begins.  This can be difficult for small vendors to\nmanage --- they cannot afford to carry idle teammates and will either\nreassign them to other projects or, in the case of contractors, let\nthem move on to other companies.  When it comes time for those vendors\nto reapply themselves to the agency's work, they have to source new\ndevelopers, onboard them, and hope they quickly come up to speed.\nThat process cannot even begin until a contract is signed, and that\nusually means projects are understaffed at the start."),(0,r.kt)("p",null,"Surely, some might say, these staffing concerns are not the procuring\nagency's problem.  After all, managing this type of staffing variance\nis exactly why an agency hires vendors in the first place.  This is\ntrue, but that doesn't mean an agency avoids the costs and risks that\ncome from a vendor's staffing issues.  Schedules will still slip,\ntasks will be rushed to compensate, and costs will increase.\nEventually, the agency will pay a price."),(0,r.kt)("p",null,"There are several approaches to problems of this nature.  One avenue\nwould be to design the development schedule to minimize\ndiscontinuities in work and contracts.  Successful modular contracting\nrequires admitting that an agency can, on paper, shift some costs and\nrisks down to vendors, but that a successful project will avoid doing\nthis.  For vendors that an agency hopes will stick around, one\napproach is to structure MSAs that make adding development stages\nfaster and easier.  Provide for a certain amount of work between\nstages so that there are no completely dead periods.  The project can\nuse those work periods to tackle the technical cleanup and\norganization tasks (like good documentation) that fast-moving development projects never seem to\nhave time to finish.  Keep the team engaged with important, default\nwork that is not tied to specific, big-ticket milestones.  That way\nthe team will remain employed and available to the procuring agency\nthroughout the project."),(0,r.kt)("p",null,"At some agencies, procurement processes are prone to long delays in\nfinalizing agreements.  Approvals get held up.  Contracts must be\nreviewed one last time.  Changes in administration can put everything\non pause.  It is important for agencies to exercise self-awareness\nabout such constraints and to guard against them."),(0,r.kt)("p",null,"As noted earlier, modular contracting can help by enabling an agency to specify\nwork in sets that fit under caps that allow contracting with\nstreamlined processes.  Other tactics can help too: Begin procurement\nprocesses early, especially renewals for additional development\nstages.  Adopt the MSA structure mentioned above, which has the\nadded benefit of enabling vendors to operate under multiple contract\nmodules at once, each with different end dates.  Design contracts to\nrun through periods when agencies might be distracted.  It would be\nunreasonable, for example, to expect the officials at the Board of\nElections to approve anything the week before an election."),(0,r.kt)("p",null,"Finally, there is another approach worth mentioning but not\nrecommending.  If an agency did not have any goals with regard to\ngrowing the pool of open-source contractors to include more small\nbusinesses, it might, as some large companies do, impose a rule that\nthe vendor cannot depend on the agency for more than a certain\npercentage of its revenue.  This might result in a preference for\ncontractors large enough to absorb the cost of carrying under-utilized\ndevelopers, or vendors large enough to have other projects with short\nterm needs for those developers to fill.  This might work, though we\nhave only seen it used in the private sector, not the public sector.\nIn any event, cultivating open-source contractors usually demands\nlearning to work with smaller firms, so we hesitate to recommend this\napproach in most instances."),(0,r.kt)("p",null,"Of course, staffing will ebb and flow as work requires and budgets\npermit.  Nothing in this section should suggest that an agency should\nconstantly carry a full complement of developers with no regard to\nsuch considerations.  The approaches described above are designed to\nprovide tools and insights agencies can use when structuring\nsuccessive contract modules.  The disruption from small gaps can be\nlarger than intended, but longer-term, planned staffing adjustments\nare always an available tool, even when issuing modular contracts."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"RECOMMENDATION"),": Smaller modular contracts can make business\nmore difficult for smaller vendors, especially in managing staffing\nand costs. However, you can alleviate this by: designing a development\nschedule to minimize discontinuities in work and contracts; adopt the\nMSA structure, which enables vendors to operate under multiple\ncontract modules at once, each with different end dates; specify work\nin sets that fit under caps that allow contracting with streamlined\nprocesses; and begin the procurement process early, especially\nrenewals for additional development stages."),(0,r.kt)("h3",{id:"maintenance-and-operations"},"Maintenance and Operations"),(0,r.kt)("p",null,"One aspect of budgeting that is often overlooked is ongoing\nmaintenance and operations (M&O).  A well-designed software package\nshould yield M&O costs that are predictable and that in most cases are\nfairly low relative to the cost of development (of course, there are\nexceptions). While there are many choices to be made about\ninfrastructure, resource usage, deployment environments and so on,\nmost of those choices result in fairly similar ongoing cost\nstructures."),(0,r.kt)("p",null,"Usually, the constraints associated with M&O are related to\nintegrating a deployment process with existing infrastructure.  This\nis an efficiency measure but also a cost factor.  That is, if an\norganization or a government has standardized infrastructure and\nprocess for managing ongoing deployments, the most cost effective\napproach is to put new technology within that structure.  Backups,\nupgrades, security alerts, uptime management, and everything else are\nhandled as a matter of course along with the rest of the technology.\nDoing any of these in an ad-hoc manner will usually raise M&O\ncosts."),(0,r.kt)("p",null,"Sometimes government agencies have recourse to centralized IT\ndepartments that operate deployments across many agencies and\ndepartments.  Central management, though, comes with its own\nconstraints.  Our experience suggests that often the only way to\neffectively manage an entire jurisdictions's worth of technology in\none central place is to force all that technology to use the same\ntechnology stacks and to deploy in uniform configurations.  This\nallows centralized IT to fit deployments into standard processes,\nautomated tools, and low-knowledge management structures.  This is an\neffective way to lower M&O costs, and a number of jurisdictions have\nadopted this approach."),(0,r.kt)("p",null,"Of course, there is a cost to restricting agencies to a set of uniform\ntechnologies arranged in pre-approved configurations.  Central\nagencies who have to consider the implications of technology changes\njurisdiction-wide sometimes find it difficult to explore new avenues\nas technology evolves.  It is difficult to approve solutions that are\nwell-suited to the needs of just one deployment scenario but require\ndeviation from the uniform deployment standards.  Every such\ndeployment undercuts part of the rationale for centralization."),(0,r.kt)("p",null,"Regardless of where the deployment eventually resides, though, it is\nreasonable to build a monthly carrying cost into the budget.  Even if\ncentralized IT hosts the deploy, it is possible (perhaps even likely)\nthat an agency will have to be a motivating force behind non-feature\nupgrades for stability and security.  The centralized agency might\nalso charge back some of its costs."),(0,r.kt)("p",null,'Custom software should not be treated like a depreciable asset that\ngets fixed when broken and replaced when outdated.  Modular design and\ncontracting approaches enable an agency to make continuous,\nsmall-scale investments in the software that can extend its lifespan\nindefinitely.  Even major upgrades and transformations can be\nperformed in stages.  The same software development process that\nperforms ongoing updates should also tend to maintenance of those\nmodules.  For software modules that are not currently undergoing active\ndevelopment, combine the maintenance with slowly tending to structure\nand paying down the "technical debt" that accumulates in projects and\ndegrades them over time.'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"RECOMMENDATION"),": While operational costs might be a separate\nline-item, much of the maintenance work should be part of the ongoing,\nmodular improvement that keeps software current and prevents an agency\nfrom having to start over. Be sure to build monthly carrying costs\ninto your budget."))}h.isMDXComponent=!0}}]);