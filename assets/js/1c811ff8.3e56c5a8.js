"use strict";(self.webpackChunkpublicgoods_toolkit=self.webpackChunkpublicgoods_toolkit||[]).push([[204],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,d=u["".concat(l,".").concat(m)]||u[m]||h[m]||o;return n?a.createElement(d,s(s({ref:t},p),{},{components:n})):a.createElement(d,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2126:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),s=["components"],i={sidebar_position:8},l="Appendix: Introduction to APIs for Non-Technical Readers",c={unversionedId:"appendix-apis",id:"appendix-apis",isDocsHomePage:!1,title:"Appendix: Introduction to APIs for Non-Technical Readers",description:'An "Application Programming Interface" (API) is essentially a',source:"@site/docs/appendix-apis.md",sourceDirName:".",slug:"/appendix-apis",permalink:"/publicgoods-toolkit/appendix-apis",editUrl:"https://github.com/unicef/publicgoods-toolkit/edit/main/docs-website/docs/appendix-apis.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Adoptability Assessment",permalink:"/publicgoods-toolkit/adoptability"},next:{title:"Appendix: Examples",permalink:"/publicgoods-toolkit/appendix-examples"}},p=[],h={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"appendix-introduction-to-apis-for-non-technical-readers"},"Appendix: Introduction to APIs for Non-Technical Readers"),(0,o.kt)("p",null,'An "Application Programming Interface" (API) is essentially a\n',(0,o.kt)("em",{parentName:"p"},"contract")," -- an agreement between two computer programs, perhaps\nrunning on different machines across a network, about how they will\nexchange data."),(0,o.kt)("p",null,'That may seem a bit abstract, so as an analogy let\'s use something\nconcrete: electrical sockets.  You expect that when you plug a lamp\ninto a wall socket, the plug and the socket will match each other in\nterms of size and shape, and that electricity will flow at a certain\nrate into the lamp so the light turns on.  You could say that when you\nplug in a lamp you invoke the "charge" functionality of the "socket"\nAPI.  Even though the manufacturers of the plug and socket are\ndifferent organizations, you can be confident that when you buy a new\nlamp with a new plug you will still be able to plug it into your\nexisting sockets.  This is because manufacturers have agreed on a\nstandard way to work together.'),(0,o.kt)("p",null,"Creators of computer programs try to do the same thing, by documenting\ntheir APIs.  The documentation is crucial: it spells out what the\nagreement is.  When you travel to another part of the world, you bring\nan adapter to allow your plugs to fit into different sockets, because\nthose sockets use a different API than the ones you're accustomed to.\nAPI documentation is what allows manufacturers to create all those\ndifferent adapters that can translate from one API to another, so you\ncan plug your lamp into a different kind of socket.  There is also\ndocumentation telling lamp makers in each country how to shape their\nplugs to receive electricity from the sockets."),(0,o.kt)("p",null,"For a computer program, the plug and socket are exchanging\ninformation, not electricity, but the concept is similar.  The\ncontract specifies that questions sent in an agreed-on format (plugs\nshaped a certain way) will receive answers also in an agreed-on format\n(electricity flowing safely)."),(0,o.kt)("p",null,'From here, it gets a bit more complex than lamp plugs and wall sockets,\nbecause the socket API is very simple: all the lamp can ask is "Please\nsend electricity", to which the socket replies by doing so.  With a\nmore complicated API, like those found in most computer programs, the\nconversation can go further than that.  For example, if one program\nsends this:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"  { MY_QUESTION, MY_RETURN_ADDRESS }\n")),(0,o.kt)("p",null,"then the other might respond with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"  { FIRST_ANSWER, NUMBER_OF_REMAINING_ANSWERS, CONVERSATION_ID }\n")),(0,o.kt)("p",null,"(The ",(0,o.kt)("inlineCode",{parentName:"p"},"CONVERSATION_ID")," is a unique number, generated by the responder,\nthat allows it to track where it is in this conversation --- because\nit might be having similar conversations with many other programs\nsimultaneously.)"),(0,o.kt)("p",null,"A response like the one above allows the asker to plan its next moves.\nIf the number of remaining answers is 0, then the asker knows it is\ndone: there is nothing more the responder can say in this conversation."),(0,o.kt)("p",null,"If the number is greater than zero, the asker can examine the content\nof the first answer.  The asker can also, for example, consider how\nlong it took for the first answer to come back and decide whether it\nwants to request the next answer in the series."),(0,o.kt)("p",null,"If the asker does request the next answer, it might send something\nlike this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"{ PLEASE_SEND_NEXT_ANSWER, CONVERSATION_ID, MY_RETURN_ADDRESS }\n")),(0,o.kt)("p",null,"The responder, seeing the same ",(0,o.kt)("inlineCode",{parentName:"p"},"CONVERSATION_ID"),", now knows to send\nthe second answer in the series, because it remembers that the asker\nhas already received the first answer."),(0,o.kt)("p",null,"This is, of course, a simplified example of an API exchange.  Real\nAPIs are more complex and are specified in much greater detail, but\nthe basic idea is the same: programs ask each other questions using a\nrestricted and very carefully defined language.  Human programmers\nlearn these languages too, in order to write programs that can talk to\neach other.  Programmers are the people shaping the lamp plugs so that\nthey can receive electricity from the wall socket, or building the\nadapter so that it can take electricity from one kind of socket to a\nnon-matching plug."),(0,o.kt)("p",null,"An API is the proper way, really the only way, to request a large\namount of data from a service.  The programs that people work with in\ndaily life have user interfaces -- i.e., they react to keyboard\npresses and mouse clicks, and display things on the screen.  But when\none needs to request from a data server, say, 15,000 records that meet\ncomplicated criteria, it makes no sense to try to point, click, and\ntype one's way repeatedly through the corresponding interface screens.\nA human's shoulder and wrists would give out long before the task were\ndone, and besides, the physical speed at which a human can make those\nmoves is far too slow to scale to that number of records."),(0,o.kt)("p",null,"Instead, the way to fetch those 15,000 records is to have a program do\nit.  Therefore, most programs are designed to have a way to respond to\nother programs.  In fact, many programs work ",(0,o.kt)("em",{parentName:"p"},"only")," this way, and\ndon't have a user interface at all: their only interface is a\nprogrammatic interface -- an API."),(0,o.kt)("p",null,'For example, while your web browser is a program that responds to key\npresses and mouse clicks coming from you, it translates them into API\nmessages that travel over the network to a web site, and that web site\nis a computer running a program known as a "web server".  The web\nserver ',(0,o.kt)("em",{parentName:"p"},"only")," responds to API messages.  It has no user interface of\nits own.  When it receives a well-formed API message, it crafts a\nreply and sends that back over the network.  Your browser receives\nthat reply and translates it into the appropriate human-visible\nbrowser action: draw a web page, or update a page element to indicate\nthat that part of the page has been submitted, etc."),(0,o.kt)("p",null,"(When a web server receives a non-well-formed API message, or is\nunable to comply with a request, it simply sends back an error message\nof some kind.  Your browser understands these error replies as well,\nand you have probably seen them displayed occasionally in place of the\ninformation you wanted.)"),(0,o.kt)("p",null,"A common phrase among programmers is that a program's API \"wraps\" that\nprogram's functionality and the data that the program has access to.\nYou could get electricity from your wall socket without using a plug\n(without calling the API), but it would be difficult.  The API is the\nsurface membrane that messages must negotiate their way through, in both\ndirections, in order for someone to access the program's data and in\norder for responses to come back out in a predictable way."))}u.isMDXComponent=!0}}]);